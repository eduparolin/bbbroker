var cov_1pbdgbnsyt=function(){var path="/project/modules/channel/Channel.js",hash="13ac05e2f9f6b1dbca3326a39db4072ca24f1b7e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/project/modules/channel/Channel.js",statementMap:{"0":{start:{line:1,column:31},end:{line:1,column:77}},"1":{start:{line:2,column:13},end:{line:2,column:31}},"2":{start:{line:4,column:16},end:{line:4,column:46}},"3":{start:{line:6,column:16},end:{line:11,column:26}},"4":{start:{line:13,column:0},end:{line:17,column:2}},"5":{start:{line:14,column:4},end:{line:16,column:7}},"6":{start:{line:19,column:0},end:{line:25,column:2}},"7":{start:{line:20,column:4},end:{line:23,column:11}},"8":{start:{line:22,column:12},end:{line:22,column:31}},"9":{start:{line:27,column:0},end:{line:29,column:2}},"10":{start:{line:31,column:0},end:{line:33,column:2}},"11":{start:{line:35,column:0},end:{line:37,column:2}},"12":{start:{line:36,column:4},end:{line:36,column:26}},"13":{start:{line:39,column:0},end:{line:82,column:2}},"14":{start:{line:40,column:22},end:{line:40,column:28}},"15":{start:{line:41,column:26},end:{line:58,column:10}},"16":{start:{line:60,column:4},end:{line:62,column:5}},"17":{start:{line:61,column:8},end:{line:61,column:53}},"18":{start:{line:64,column:18},end:{line:71,column:6}},"19":{start:{line:73,column:4},end:{line:75,column:5}},"20":{start:{line:74,column:8},end:{line:74,column:45}},"21":{start:{line:77,column:4},end:{line:79,column:5}},"22":{start:{line:78,column:8},end:{line:78,column:45}},"23":{start:{line:81,column:4},end:{line:81,column:19}},"24":{start:{line:84,column:0},end:{line:84,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:25},end:{line:13,column:26}},loc:{start:{line:13,column:37},end:{line:17,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:19,column:28},end:{line:19,column:29}},loc:{start:{line:19,column:63},end:{line:25,column:1}},line:19},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:17},end:{line:21,column:18}},loc:{start:{line:21,column:23},end:{line:23,column:9}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:27,column:27},end:{line:27,column:28}},loc:{start:{line:27,column:37},end:{line:29,column:1}},line:27},"4":{name:"(anonymous_4)",decl:{start:{line:31,column:27},end:{line:31,column:28}},loc:{start:{line:31,column:37},end:{line:33,column:1}},line:31},"5":{name:"(anonymous_5)",decl:{start:{line:35,column:23},end:{line:35,column:24}},loc:{start:{line:35,column:35},end:{line:37,column:1}},line:35},"6":{name:"(anonymous_6)",decl:{start:{line:39,column:31},end:{line:39,column:32}},loc:{start:{line:39,column:64},end:{line:82,column:1}},line:39}},branchMap:{"0":{loc:{start:{line:60,column:4},end:{line:62,column:5}},type:"if",locations:[{start:{line:60,column:4},end:{line:62,column:5}},{start:{line:60,column:4},end:{line:62,column:5}}],line:60},"1":{loc:{start:{line:73,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:73,column:4},end:{line:75,column:5}},{start:{line:73,column:4},end:{line:75,column:5}}],line:73},"2":{loc:{start:{line:77,column:4},end:{line:79,column:5}},type:"if",locations:[{start:{line:77,column:4},end:{line:79,column:5}},{start:{line:77,column:4},end:{line:79,column:5}}],line:77}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const[Sequelize,sequelize]=(cov_1pbdgbnsyt.s[0]++,require('../common/services/database.service'));const uuid=(cov_1pbdgbnsyt.s[1]++,require('uuid/v4'));const Gateway=(cov_1pbdgbnsyt.s[2]++,require('../gateways/Gateway'));const Channel=(cov_1pbdgbnsyt.s[3]++,sequelize.define('channel',{id:{type:Sequelize.UUID,primaryKey:true,defaultValue:Sequelize.UUIDV4},status:{type:Sequelize.ENUM('FREE','BUSY'),allowNull:false},gw_reference:{type:Sequelize.STRING(36),allowNull:false},reservation:{type:Sequelize.UUID}},{tableName:'channel'}));cov_1pbdgbnsyt.s[4]++;Channel.prototype.free=function(){cov_1pbdgbnsyt.f[0]++;cov_1pbdgbnsyt.s[5]++;return this.update({status:'FREE'});};cov_1pbdgbnsyt.s[6]++;Channel.prototype.sendSms=function(destinationNumber,text){cov_1pbdgbnsyt.f[1]++;cov_1pbdgbnsyt.s[7]++;return this.Gateway.sendSms(this.gw_reference,destinationNumber,text).finally(()=>{cov_1pbdgbnsyt.f[2]++;cov_1pbdgbnsyt.s[8]++;return this.free();});};cov_1pbdgbnsyt.s[9]++;Channel.getChannelByChip=chip=>{cov_1pbdgbnsyt.f[3]++;};cov_1pbdgbnsyt.s[10]++;Channel.getChannelByName=name=>{cov_1pbdgbnsyt.f[4]++;};cov_1pbdgbnsyt.s[11]++;Channel.listChannels=function(){cov_1pbdgbnsyt.f[5]++;cov_1pbdgbnsyt.s[12]++;return this.findAll();};cov_1pbdgbnsyt.s[13]++;Channel.reserveAndGetChannel=async function(route,operator){cov_1pbdgbnsyt.f[6]++;let reservation=(cov_1pbdgbnsyt.s[14]++,uuid());let[,updatedRows]=(cov_1pbdgbnsyt.s[15]++,await sequelize.query(`UPDATE channel SET status = 'BUSY', reservation = :reservation WHERE id IN (SELECT channel_id FROM (
                     SELECT ch.id channel_id, (IF(c.operator = :operator, c.limit_on_net - c.sent_on_net, c.limit_off_net - c.sent_off_net)) remaining_limit
                     FROM channel ch 
                     JOIN chip c ON c.channel_id = ch.id
                     JOIN route r ON c.route_id = r.id 
                     WHERE r.prefix = :route AND ch.status = 'FREE'
                     HAVING remaining_limit > 0
                     ORDER BY remaining_limit DESC LIMIT 5) AS list
                     ORDER BY RAND()) LIMIT 1`,{replacements:{reservation:reservation,route:route,operator:operator},type:sequelize.QueryTypes.UPDATE}));cov_1pbdgbnsyt.s[16]++;if(updatedRows!==1){cov_1pbdgbnsyt.b[0][0]++;cov_1pbdgbnsyt.s[17]++;throw new Error('Could not reserve channel');}else{cov_1pbdgbnsyt.b[0][1]++;}let channel=(cov_1pbdgbnsyt.s[18]++,await this.findOne({where:{reservation:reservation},include:[{model:Gateway}]}));cov_1pbdgbnsyt.s[19]++;if(!channel){cov_1pbdgbnsyt.b[1][0]++;cov_1pbdgbnsyt.s[20]++;throw new Error('Channel not found');}else{cov_1pbdgbnsyt.b[1][1]++;}cov_1pbdgbnsyt.s[21]++;if(!channel.Gateway){cov_1pbdgbnsyt.b[2][0]++;cov_1pbdgbnsyt.s[22]++;throw new Error('Gateway not found');}else{cov_1pbdgbnsyt.b[2][1]++;}cov_1pbdgbnsyt.s[23]++;return channel;};cov_1pbdgbnsyt.s[24]++;module.exports=Channel;