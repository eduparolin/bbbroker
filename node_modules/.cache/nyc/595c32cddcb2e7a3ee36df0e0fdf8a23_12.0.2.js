var cov_1xp68ste2k=function(){var path="/project/modules/freeswicth/FreeSwitch.mock.js",hash="cc0da4ec94e2db336d4e912d2a27c3c9cb20aa4c",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/project/modules/freeswicth/FreeSwitch.mock.js",statementMap:{"0":{start:{line:1,column:20},end:{line:1,column:67}},"1":{start:{line:2,column:20},end:{line:2,column:67}},"2":{start:{line:4,column:13},end:{line:4,column:42}},"3":{start:{line:8,column:8},end:{line:12,column:9}},"4":{start:{line:9,column:12},end:{line:9,column:62}},"5":{start:{line:11,column:12},end:{line:11,column:67}},"6":{start:{line:16,column:8},end:{line:20,column:9}},"7":{start:{line:17,column:12},end:{line:17,column:63}},"8":{start:{line:19,column:12},end:{line:19,column:63}},"9":{start:{line:24,column:0},end:{line:24,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:59},end:{line:13,column:5}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:30},end:{line:21,column:5}},line:15}},branchMap:{"0":{loc:{start:{line:8,column:8},end:{line:12,column:9}},type:"if",locations:[{start:{line:8,column:8},end:{line:12,column:9}},{start:{line:8,column:8},end:{line:12,column:9}}],line:8},"1":{loc:{start:{line:16,column:8},end:{line:20,column:9}},type:"if",locations:[{start:{line:16,column:8},end:{line:20,column:9}},{start:{line:16,column:8},end:{line:20,column:9}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const failGateway=(cov_1xp68ste2k.s[0]++,require('../../tests/testConfigs').fail.gateway);const failMessage=(cov_1xp68ste2k.s[1]++,require('../../tests/testConfigs').fail.message);let Mocker=(cov_1xp68ste2k.s[2]++,require('../../tests/Mocker'));class FreeSwitch extends Mocker{static sendSms(host,channel,destinationNumber,text){cov_1xp68ste2k.f[0]++;cov_1xp68ste2k.s[3]++;if(destinationNumber===failMessage.destination){cov_1xp68ste2k.b[0][0]++;cov_1xp68ste2k.s[4]++;return this.shallReject('Failed to send Message');}else{cov_1xp68ste2k.b[0][1]++;cov_1xp68ste2k.s[5]++;return this.shallResolve('Message sent successfully!');}}static listChannels(host){cov_1xp68ste2k.f[1]++;cov_1xp68ste2k.s[6]++;if(host===failGateway.host){cov_1xp68ste2k.b[1][0]++;cov_1xp68ste2k.s[7]++;return this.shallReject('Failed to list channels');}else{cov_1xp68ste2k.b[1][1]++;cov_1xp68ste2k.s[8]++;return this.shallResolve('List of channels here!');}}}cov_1xp68ste2k.s[9]++;module.exports=FreeSwitch;